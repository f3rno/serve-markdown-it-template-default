<!DOCTYPE html>
<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">

    <link rel="stylesheet" type="text/css" href="/index.css" />

    {% if templateConfig.maxWidth %}
      <style>
        .svw-centered {
          max-width: {{ templateConfig.maxWidth | safe }};
        }
      </style>
    {% endif %}

    {% block head %}{% endblock %}

    <title>{% block page_title %}{% endblock %}</title>
  </head>
  <body class="theme-dark-ayu">
    <div class="svw-outer">
      <div class="svw-content-wrapper {{ flags or "" }}">
        {% for section in templateConfig.sections.order %}
        {% if section == 'content' %}
        {% if templateConfig.sections.content != false %}
        {% if templateConfig.sections.order.indexOf('content') != -1 %}
          {% block content %}{% endblock %}
        {% endif %}
        {% endif %}
        {% elseif section == 'settings' %}
        {% if templateConfig.sections.settings != false %}
        {% if templateConfig.sections.order.indexOf('settings') != -1 %}
          <div class="svw-content svw-centered">
            <div class="svw-settings svw-header">
              <div class="svw-header-left">
                <div class="svw-control">
                  <label for="svw-settings-syntax-theme-control">
                    <p>Syntax Colors</p>
                  </label>

                  <select id="svw-settings-syntax-theme-control" value="darcula">
                    <option value="a11y-dark">A11y dark</option>
                    <option value="a11y-light">A11y light</option>
                    <option value="agate">Agate</option>
                    <option value="androidstudio">Androidstudio</option>
                    <option value="an-old-hope">An old hope</option>
                    <option value="arduino-light">Arduino light</option>
                    <option value="arta">Arta</option>
                    <option value="ascetic">Ascetic</option>
                    <option value="atelier-cave-dark">Atelier cave dark</option>
                    <option value="atelier-cave-light">Atelier cave light</option>
                    <option value="atelier-dune-dark">Atelier dune dark</option>
                    <option value="atelier-dune-light">Atelier dune light</option>
                    <option value="atelier-estuary-dark">Atelier estuary dark</option>
                    <option value="atelier-estuary-light">Atelier estuary light</option>
                    <option value="atelier-forest-dark">Atelier forest dark</option>
                    <option value="atelier-forest-light">Atelier forest light</option>
                    <option value="atelier-heath-dark">Atelier heath dark</option>
                    <option value="atelier-heath-light">Atelier heath light</option>
                    <option value="atelier-lakeside-dark">Atelier lakeside dark</option>
                    <option value="atelier-lakeside-light">Atelier lakeside light</option>
                    <option value="atelier-plateau-dark">Atelier plateau dark</option>
                    <option value="atelier-plateau-light">Atelier plateau light</option>
                    <option value="atelier-savanna-dark">Atelier savanna dark</option>
                    <option value="atelier-savanna-light">Atelier savanna light</option>
                    <option value="atelier-seaside-dark">Atelier seaside dark</option>
                    <option value="atelier-seaside-light">Atelier seaside light</option>
                    <option value="atelier-sulphurpool-dark">Atelier sulphurpool dark</option>
                    <option value="atelier-sulphurpool-light">Atelier sulphurpool light</option>
                    <option value="atom-one-dark">Atom one dark</option>
                    <option value="atom-one-dark-reasonable">Atom-one-dark-reasonable</option>
                    <option value="atom-one-light">Atom one light</option>
                    <option value="brown-paper">Brown paper</option>
                    <option value="brown-papersq.png">Brown-papersq.png</option>
                    <option value="codepen-embed">Codepen embed</option>
                    <option value="color-brewer">Color brewer</option>
                    <option value="darcula" selected="">Darcula</option>
                    <option value="dark">Dark</option>
                    <option value="default">Default</option>
                    <option value="docco">Docco</option>
                    <option value="dracula">Dracula</option>
                    <option value="far">Far</option>
                    <option value="foundation">Foundation</option>
                    <option value="github">Github</option>
                    <option value="github-gist">Github gist</option>
                    <option value="gml">Gml</option>
                    <option value="googlecode">Googlecode</option>
                    <option value="gradient-dark">Gradient dark</option>
                    <option value="grayscale">Grayscale</option>
                    <option value="gruvbox-dark">Gruvbox dark</option>
                    <option value="gruvbox-light">Gruvbox light</option>
                    <option value="hopscotch">Hopscotch</option>
                    <option value="hybrid">Hybrid</option>
                    <option value="idea">Idea</option>
                    <option value="ir-black">Ir black</option>
                    <option value="isbl-editor-dark">Isbl editor dark</option>
                    <option value="isbl-editor-light">Isbl editor light</option>
                    <option value="kimbie.dark">Kimbie.dark</option>
                    <option value="kimbie.light">Kimbie.light</option>
                    <option value="lightfair">Lightfair</option>
                    <option value="lioshi">Lioshi</option>
                    <option value="magula">Magula</option>
                    <option value="mono-blue">Mono blue</option>
                    <option value="monokai">Monokai</option>
                    <option value="monokai-sublime">Monokai sublime</option>
                    <option value="night-owl">Night owl</option>
                    <option value="nnfx">Nnfx</option>
                    <option value="nnfx-dark">Nnfx dark</option>
                    <option value="nord">Nord</option>
                    <option value="obsidian">Obsidian</option>
                    <option value="ocean">Ocean</option>
                    <option value="paraiso-dark">Paraiso dark</option>
                    <option value="paraiso-light">Paraiso light</option>
                    <option value="pojoaque">Pojoaque</option>
                    <option value="pojoaque.jpg">Pojoaque.jpg</option>
                    <option value="purebasic">Purebasic</option>
                    <option value="qtcreator_dark">Qtcreator_dark</option>
                    <option value="qtcreator_light">Qtcreator_light</option>
                    <option value="railscasts">Railscasts</option>
                    <option value="rainbow">Rainbow</option>
                    <option value="routeros">Routeros</option>
                    <option value="school-book">School book</option>
                    <option value="school-book.png">School-book.png</option>
                    <option value="shades-of-purple">Shades of purple</option>
                    <option value="solarized-dark">Solarized dark</option>
                    <option value="solarized-light">Solarized light</option>
                    <option value="srcery">Srcery</option>
                    <option value="sunburst">Sunburst</option>
                    <option value="tomorrow">Tomorrow</option>
                    <option value="tomorrow-night-blue">Tomorrow night blue</option>
                    <option value="tomorrow-night-bright">Tomorrow night bright</option>
                    <option value="tomorrow-night">Tomorrow night</option>
                    <option value="tomorrow-night-eighties">Tomorrow night eighties</option>
                    <option value="vs2015">Vs2015</option>
                    <option value="vs">Vs</option>
                    <option value="xcode">Xcode</option>
                    <option value="xt256">Xt256</option>
                    <option value="zenburn">Zenburn</option>
                  </select>
                </div>
              </div>

              <div class="svw-header-right">
                <div class="svw-control">
                  <label for="svw-settings-theme-control">
                    <p>Theme</p>
                  </label>

                  <select id="svw-settings-theme-control">
                    <option value="dark-ayu">Ayu Dark</option>
                    <option value="light-default-blue">Light Default Blue</option>
                    <option value="light-default-green">Light Default Green</option>
                    <option value="dark-adwaita-blue">Dark Adwaita Blue</option>
                    <option value="dark-adwaita-green">Dark Adwaita Green</option>
                  </select>
                </div>
              </div>
            </div>
          </div>
        {% endif %}
        {% endif %}
        {% elseif section == 'debug' %}
        {% if templateConfig.sections.debug != false %}
        {% if templateConfig.sections.order.indexOf('debug') != -1 %}
          <div class="svw-content svw-centered">
            <div class="svw-debug closed">
              <div class="svw-header">
                <div class="svw-header-left">
                  <p class="bold">debug</p>
                </div>

                <div class="svw-header-right">
                  <a class="svw-debug-toggle-button" href="javascript:void(0)"><p>toggle</p></a>
                </div>
              </div>

              <div class="svw-markdown">
                {{ configHTML | safe }}
              </div>
            </div>
          </div>
        {% endif %}
        {% endif %}
        {% endif %}
        {% endfor %}
      </div>
    </div>

    <script src="/js/zepto/zepto.min.js"></script>
    <script>
      const THEME_KEY = "svwTheme"
      const SYNTAX_KEY = "svwSyntax"
      const THEME_FALLBACK = "dark-ayu"
      const SYNTAX_FALLBACK = "dracula"

      const initOnReady = () => {
        setSyntax(getActiveSyntax())
        setTheme(getActiveTheme())
      }

      const enableSyntaxStyleSheet = (theme) => {
        const link = document.createElement("link")

        $(link).attr("href", "/css/highlightjs/" + theme + ".css")
        $(link).attr("type", "text/css")
        $(link).attr("rel", "stylesheet")

        $(document.head).append(link)
      }

      const disableSyntaxStyleSheets = () => {
        const sheets = Object.keys(document.styleSheets)

        sheets.forEach((index) => {
          const sheet = document.styleSheets[index]
          sheet.disabled = !(/index.css$/u.test(sheet.href))
        })
      }

      const getActiveTheme = () => {
        const savedTheme = localStorage && localStorage[THEME_KEY]

        if (savedTheme) {
          return savedTheme
        }

        const bodyClass = ($(document.body).attr("class") || "").trim()

         return bodyClass.length === 0
          ? savedTheme || THEME_FALLBACK
          : bodyClass
            .split(" ")
            .filter(function (c) { return /^theme-/u.test(c) })
            .map(function (c) { return c.replace(/^theme-/u, "") })
            .join(" ")
      }

      const getActiveSyntax = () => {
        const savedSyntax = localStorage && localStorage[SYNTAX_KEY]
        return savedSyntax || SYNTAX_FALLBACK
      }

      const setSyntax = (syntax) => {
        disableSyntaxStyleSheets()
        enableSyntaxStyleSheet(syntax)
        $("#svw-settings-syntax-theme-control").val(syntax)
      }

      const setTheme = (theme) => {
        $(document.body).attr("class", `theme-${theme}`)
        $("#svw-settings-theme-control").val(theme)
      }

      $(document).ready(initOnReady)
    </script>

    {% if templateConfig.sections.settings != false %}
    {% if templateConfig.sections.order.indexOf('settings') != -1 %}
    <script>
      const initSettingsBarOnReady = () => {
        $("#svw-settings-theme-control").change(onThemeChanged)
        $("#svw-settings-syntax-theme-control").change(onSyntaxChanged)
      }

      const onThemeChanged = (e) => {
        const v = $(e.target).val()

        $(document.body).removeClass()
        $(document.body).addClass("theme-" + v)

        if (localStorage) {
          localStorage[THEME_KEY] = v
        }
      }

      const onSyntaxChanged = (e) => {
        const v = $(e.target).val()

        disableSyntaxStyleSheets()
        enableSyntaxStyleSheet(v)

        if (localStorage) {
          localStorage[SYNTAX_KEY] = v
        }
      }

      $(document).ready(initSettingsBarOnReady)
    </script>
    {% endif %}
    {% endif %}

    {% if templateConfig.sections.debug != false %}
    {% if templateConfig.sections.order.indexOf('debug') != -1 %}
    <script>
      const toggleConfigPanel = () => {
        const elm = $('.svw-debug')

        if (elm.hasClass('closed')) {
          elm.removeClass('closed')
        } else {
          elm.addClass('closed')
        }
      }

      $(document).ready(() => {
        $('.svw-debug-toggle-button').click(toggleConfigPanel)
      })
    </script>
    {% endif %}
    {% endif %}
    {% block scripts %}{% endblock %}
  </body>
</html>
